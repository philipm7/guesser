---
description: "All code and documentation must use Docker - no local development allowed"
globs: ["**/*"]
alwaysApply: true
---

# Use Docker For Everything

## üê≥ Core Rule: EVERYTHING runs in Docker containers

This project MUST use Docker for all development, testing, and deployment. No exceptions.

## ‚úÖ What this means:

### Code Requirements:
- All servers bind to `0.0.0.0`, never `localhost`
- Use environment variables for configuration
- Detect Docker environment: `process.env.NODE_ENV === 'production' || process.env.DOCKER_ENV`
- Puppeteer must use headless mode in containers with `--no-sandbox`, `--disable-dev-shm-usage`, `--single-process` flags

### Documentation Requirements:
- Only mention Docker installation (never npm/node locally)
- Setup instructions: `docker-compose up --build`
- All examples use Docker commands
- Emphasize "works on any machine with Docker"

### Project Structure:
- `docker-compose.yml` in root
- `Dockerfile` in each service directory (`backend/`, `frontend/`)
- `.dockerignore` files to exclude `node_modules`, `.git`, etc.

## ‚ùå Never do this:
- Install Node.js or npm locally
- Use `localhost` in server bindings
- Write OS-specific setup instructions
- Create code that only works on your machine

## ‚úÖ Always do this:
- Use `docker-compose up --build` to run everything
- Bind servers to `0.0.0.0` for container networking
- Include health checks in services
- Use non-root users in Dockerfiles for security

## üöÄ How to Run This Project

When someone asks how to run this project, provide these exact instructions:

### Prerequisites:
- Docker (20.10+)
- Docker Compose (2.0+)
**No Node.js, npm, or other dependencies needed!**

### Setup & Run:
```bash
# 1. Clone the repository
git clone <repo-url>
cd Guesser

# 2. Start the application
docker-compose up --build

# OR run in background
docker-compose up -d --build
```

### Access the Application:
- **Frontend**: http://localhost:3000
- **Backend API**: http://localhost:3001  
- **Health Check**: http://localhost:3001/api/health

### Development Commands:
```bash
# View logs
docker-compose logs -f

# Stop services
docker-compose down

# Restart after changes
docker-compose up --build

# Access container shell for debugging
docker-compose exec backend sh
docker-compose exec frontend sh
```

### Troubleshooting:
- **Port conflicts**: Run `docker-compose down` first
- **Build issues**: Run `docker system prune -f` then rebuild
- **Services not starting**: Check logs with `docker-compose logs <service>`

## üéØ Success criteria:
Anyone should be able to run `docker-compose up --build` on a fresh clone and have everything work immediately.